name: Build

on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: true

      matrix:
        os: [ubuntu-22.04, macos-13]
        build_type: [Release]
        c_compiler: [clang, clang-16, gcc-12]
        include:
          - os: ubuntu-22.04
            c_compiler: clang-16
            cpp_compiler: clang++-16
          - os: ubuntu-22.04
            c_compiler: gcc-12
            cpp_compiler: g++-12
          - os: macos-13
            c_compiler: clang
            cpp_compiler: clang++
        exclude:
          - os: ubuntu-22.04
            c_compiler: clang
          - os: macos-13
            c_compiler: clang-16
          - os: macos-13
            c_compiler: gcc-12

    steps:
      - uses: actions/checkout@v3

      - name: Set reusable strings
        # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
        id: strings
        shell: bash
        run: |
          echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

      - name: Setup APT dependencies
        if: startsWith(matrix.os, 'ubuntu')
        run: |
          wget --no-check-certificate -O - https://apt.llvm.org/llvm-snapshot.gpg.key | sudo apt-key add - && \
          sudo add-apt-repository 'deb ${{ env.LLVM_REPO }} ${{ env.LLVM_REPO_TOOLCHAIN }} main' &&
          sudo add-apt-repository 'deb-src ${{ env.LLVM_REPO }} ${{ env.LLVM_REPO_TOOLCHAIN }} main' && \
          sudo apt-get update && \
          sudo apt-get install -y gcc-${{ env.GCC_VERSION }} llvm-${LLVM_VERSION} clang-${LLVM_VERSION}
        env:
          GCC_VERSION: 12
          LLVM_VERSION: 16
          LLVM_REPO: http://apt.llvm.org/jammy/
          LLVM_REPO_TOOLCHAIN: llvm-toolchain-jammy-16

      - name: Setup vcpkg
        uses: lukka/run-vcpkg@v11

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: >
          cmake -B ${{ steps.strings.outputs.build-output-dir }}
          -DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}/vcpkg/scripts/buildsystems/vcpkg.cmake
          -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
          -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
          -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
          -S ${{ github.workspace }}

      - name: Build
        # Build the targets using the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

      - name: Test
        working-directory: ${{ steps.strings.outputs.build-output-dir }}
        # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest --build-config ${{ matrix.build_type }}
